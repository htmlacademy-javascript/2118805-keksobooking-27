function getRandomPositiveInteger (a, b) {
  if (a < 0 || b < 0) return NaN;
  // В случае отрицательных значений аргументов вернет NaN
  if (b < a) [b, a] = [a, b];
  // В случае если аргумент "от" больше "до" значений аргументов поменяются местами

  // После нам нужно убедиться, что пользователь не передал дробные значения,
  // для этого на всякий пожарный случай нижнюю границу диапазона
  // мы округляем к ближайшему большему целому с помощью Math.ceil,
  // а верхнюю границу - к ближайшему меньшему целому с помощью Math.floor
  const lower = Math.ceil(a);
  const upper = Math.floor(b);

  // Дальше используем Math.random() для получения случайного дробного числа в диапазоне [0, 1],
  // которое домножаем на разницу между переданными числами плюс единица - это будет наша случайная дельта.
  // После нужно сложить дельту с минимальным значением, чтобы получить итоговое случайное число.
  const result = Math.random() * (upper - lower + 1) + lower;
  // "Плюс единица", чтобы включить верхнюю границу диапазона в случайные числа

  // И в конце с помощью метода Math.floor мы округляем полученный результат,
  // потому что Math.random() генерирует только дробные числа и ноль.
  return Math.floor(result);
}
getRandomPositiveInteger(5, 5);

function getRandomPositiveFloat (a, b, digits = 1) {
  // Если переданы отрицительные числа, возвращаем NaN
  if (a < 0 || b < 0 || digits < 0) return NaN;
  if (b < a) [b, a] = [a, b];
  // Дальше используем Math.random() для получения случайного дробного числа в диапазоне [0, 1],
  // которое домножаем на разницу между переданными числами - это будет наша случайная дельта.
  // После нужно сложить дельту с минимальным значением, чтобы получить итоговое случайное число.
  const result = Math.random() * (b - a) + a;
  return +result.toFixed(digits);
}

getRandomPositiveFloat (1, 5, 1);
